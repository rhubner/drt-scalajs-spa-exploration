# Config file in HOCON format.  See following for more information:
# https://www.playframework.com/documentation/latest/Configuration

application.cdn = ""
application.cdn = ${?APPLICATION_CDN}

portcode = ${PORT_CODE}

play.http.context = "/v2/"${portcode}"/live"

persistenceBaseDir = "/tmp"
persistenceBaseDir = ${?PERSISTENCE_BASE_DIR}

akka {
//  loglevel ="DEBUG"

  jvm-exit-on-fatal-error = true
  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb.dir = ${persistenceBaseDir}
    }
    snapshot-store {
      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"
      # Local filesystem snapshot store plugin.
      local {
        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"
        # Storage location of snapshot files.
        dir = ${persistenceBaseDir}"/snapshots"
      }
    }

  }
  actor {
    serializers {
      staffMovementsEvent = "actors.serializers.StaffMovementProtoBufSerializer"
      shiftsEvent = "actors.serializers.ShiftsProtoBufSerializer"
      flightsEvent = "actors.serializers.FlightsProtoBufSerializer"
      flightStateSnapshotEvent = "actors.serializers.FlightStateSnapshotProtoBufSerializer"
      flightLastKnownPaxEvent = "actors.serializers.FlightLastKnownPaxProtoBufSerializer"
    }
    serialization-bindings {
      "server.protobuf.messages.StaffMovementMessages.StaffMovementsMessage" = staffMovementsEvent
      "server.protobuf.messages.ShiftMessage.ShiftsMessage" = shiftsEvent
      "server.protobuf.messages.FlightsMessage.FlightsMessage" = flightsEvent
      "server.protobuf.messages.FlightsMessage.FlightStateSnapshotMessage" = flightStateSnapshotEvent
      "server.protobuf.messages.FlightsMessage.FlightLastKnownPaxMessage" = flightLastKnownPaxEvent
    }
  }
}

passenger_splits_csv_url: ""
passenger_splits_csv_url: ${?PAX_SPLITS_CSV_URL}

walk_times {
  gates_csv_url = ""
  gates_csv_url = ${?GATES_WALK_TIMES_CSV_URL}
  stands_csv_url = ""
  stands_csv_url = ${?STANDS_WALK_TIMES_CSV_URL}
}

chroma {
  username = ""
  username = ${?CHROMA_USERNAME}
  password = ""
  password = ${?CHROMA_PASSWORD}
  url {
    token = ""
    token = ${?CHROMA_TOKEN_URL}
    live = ""
    live = ${?CHROMA_LIVE_URL}
  }
}

lhr_live_url = ""
lhr_live_url = ${?LHR_LIVE_URL}
lhr_live_username = ""
lhr_live_username = ${?LHR_LIVE_USERNAME}
lhr_live_password = ""
lhr_live_password = ${?LHR_LIVE_PASSWORD}
lhr {
  blackjack_url = ""
  blackjack_url = ${?BLACKJACK_URL}
}

atmos {
  s3 {
    url = ${?ATMOS_S3_URL}
    bucket = ${?ATMOS_S3_BUCKET}
  }
}

feeds {
  gatwick {
    live {
      azure {
        namespace = ${?LGW_AZ_NAMESPACE}
        name.id = ${?LGW_AZ_NAME_ID}
        issuer = ${?LGW_AZ_ISSUER}
      }
    }
  }
}
